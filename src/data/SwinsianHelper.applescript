-- SwinsianHelper
--
-- This application should be saved as an Application in Script Editor
-- with the "Stay open after run handler" flag enabled.
--
-- This application will write two files to the directory in which it is saved
-- based on Swinsian playback:
-- now-playing.jpg:  The album art for the currently playing track, if available
-- now-playing.json: A JSON structure containing the track's title, artist, and album
--
-- It will also create a third file for debugging purposes:
-- SwinsianHelper.log: A log file generated by the application's actions
--
-- Download Swinsian from https://swinsian.com

global lastTrack
global currentPath

on log_event(themessage)
	-- Fetch the path to this script
	tell application "Finder"
		set currentPath to container of (path to me) as alias
	end tell

	-- Create the path where logs will be stored
	set logFilename to ((currentPath as text) & "SwinsianHelper.log")

	-- Create the message to write in the file
	set theLine to (do shell script ¬
		"date  +'%Y-%m-%d %H:%M:%S'" as string) ¬
		& " " & themessage & "\n"

	-- Open the log file for writing
	set logFile to open for access logFilename with write permission

	try
		-- Write the log message to the file as UTF-8
		write theLine to logFile as «class utf8» starting at eof

		-- Close the file
		close access logFile
	on error errorMessage
		close access logFile

		-- Present an error dialog if the operation fails
		present_error(errorMessage)

	end try
end log_event

on empty_log()
	-- Fetch the path to this script
	tell application "Finder"
		set currentPath to container of (path to me) as alias
	end tell

	-- Create the path where logs will be stored
	set logFilename to ((currentPath as text) & "SwinsianHelper.log")

	-- Open the log file for writing
	set lf to open for access file logFilename with write permission

	-- Truncate the log file
	set eof lf to 0

	-- Write the first message
	set theLine to (do shell script ¬
		"date  +'%Y-%m-%d %H:%M:%S'" as string) ¬
		& " Cleaned log before first use.\n"

	try
		-- Write the message to the file
		write theLine to lf starting at eof

		-- Close the file
		close access lf
	on error errorMessage
		close access lf

		-- Present an error dialog if the operation fails
		present_error(errorMessage)
	end try
end empty_log

on present_error(errorMessage)
	set dialogText to "SwinsianHelper encountered the following error:\n" & errorMessage & "\n\nWould you like to stop executing SwinsianHelper?"
	display dialog dialogText with icon note buttons {"Exit", "Continue"}
	if the button returned of the result is "Exit" then
		return
	end if
end present_error

on write_artwork()
	log_event("Beginning to write artwork...")

	tell application "Swinsian"
		try
			-- Store the raw bytes of the artwork
			set albumArt to album art of current track
		on error errorMessage
			-- Present an error dialog if the operation fails
			present_error(errorMessage)
		end try
	end tell

	-- Create the artwork path and open the file for writing
	set artFilename to ((currentPath as text) & "now-playing.jpg")
	set artFile to open for access artFilename with write permission

	-- Truncate the artwork file
	set eof artFile to 0

	-- Write the image bytes to disk and close the file
	log_event("Writing album art to file...")
	try
		write albumArt to artFile
		close access artFile
		log_event("Successfully wrote artwork!")
	on error errorMessage
		-- Present an error dialog if the operation fails
		close access artFile
		present_error(errorMessage)
	end try
end write_artwork

on write_info()
	log_event("Beginning to write info...")

	tell application "Swinsian"
		-- Attempt to fetch the current track and store associated track info
		try
			set trackName to name of current track
			set trackArtist to artist of current track
			set trackAlbum to album of current track
		on error errorMessage
			-- Present an error dialog if the operation fails
			present_error(errorMessage)
		end try
	end tell

	tell application "JSON Helper"
		set trackJson to make JSON from {title:trackName, artist:trackArtist, album:trackAlbum}
	end tell

	-- Store the path to the JSON file
	set jsonFilename to ((currentPath as text) & "now-playing.json")

	-- Write to the JSON file
	set jsonFile to open for access file jsonFilename with write permission

	-- Truncate the JSON file
	set eof jsonFile to 0

	-- Write the bytes to disk and close the file
	log_event("Writing track info to file...")
	try
		write trackJson to jsonFile as «class utf8»
		close access jsonFile
		log_event("Successfully wrote track info!")
	on error errorMessage
		-- Present an error dialog if the operation fails
		close access jsonFile
		present_error(errorMessage)
	end try
end write_info

on run
	-- Try to empty the log file before writing
	empty_log()
	log_event("Starting helper...")

	tell application "Swinsian"
		try
			-- Begin playback and setup the global last track
			play
			set lastTrack to name of current track
		on error errorMessage
			-- Present an error dialog if the operation fails
			present_error(errorMessage)
		end try
	end tell

	-- Write info and artwork for the first time
	write_info()
	write_artwork()
end run

on idle
	-- Fetch the path to this script
	tell application "Finder"
		set currentPath to container of (path to me) as alias
	end tell

	tell application "Swinsian"
		set currentTrack to name of current track
	end tell

	-- Check if the track has changed
	log_event("Checking if track has changed...\ncurrent track:\t" & currentTrack & "\nlast track:\t\t" & (lastTrack))
	if currentTrack is not lastTrack then
		log_event("currentTrack is different from lastTrack!")

		-- Update lastTrack
		log_event("Updating last track")
		set lastTrack to currentTrack

		-- Write the artwork and info to disk
		write_artwork()
		write_info()
	else
		log_event("Tracks are the same. No action will be taken.")
	end if

	-- Run the script again in 1s
	log_event("Repeating...")
	return 1
end idle
